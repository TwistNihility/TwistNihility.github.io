<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sisyphus&#39;s Utopia</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-20T18:06:15.582Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Twist Nihility</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TFMLC学习笔记（1） TensorFlow基础</title>
    <link href="http://yoursite.com/2018/04/20/TFMLC-1/"/>
    <id>http://yoursite.com/2018/04/20/TFMLC-1/</id>
    <published>2018-04-19T18:41:11.000Z</published>
    <updated>2018-04-20T18:06:15.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TensorFlow算法的一般流程"><a href="#TensorFlow算法的一般流程" class="headerlink" title="TensorFlow算法的一般流程"></a>TensorFlow算法的一般流程</h1><ol><li>导入/生成样本数据集</li><li>转换和归一化数据</li></ol><ul><li>归一化函数如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=tf.nn.batch_norm_with_global_normalization(...)</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>将样本数据集划为三块：训练样本集、测试样本集、验证样本集<br> 训练集和测试集要不同；用验证集决定最优的超参数</li><li>设置机器学习参数（超参数）</li></ol><ul><li>经常一次性初始化所有的机器学习参数，例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learning_rate=<span class="number">0.01</span></span><br><span class="line">batch_size=<span class="number">100</span></span><br><span class="line">iterations=<span class="number">1000</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>初始化变量和占位符</li></ol><ul><li>在求解最优化工程中（最小化损失函数），TensorFlow使用占位符获取数据，并调整变量和权重/偏差；</li></ul><ul><li>TensorFlow指定数据大小和数据类型化初始化变量和占位符；</li></ul><ul><li>使用的数据类型字节数越多，结果越精确，运行速度也越慢；<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_var=tf.constant(<span class="number">42</span>)</span><br><span class="line">x_input=tf.placeholder(tf.float32,[<span class="keyword">None</span>,input_size])</span><br><span class="line">y_input=tf.placeholder(tf.float32,[<span class="keyword">None</span>,num_classes])</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>定义模型结构</li></ol><ul><li>一个简单的线性模型：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred=tf.add(tf.mul(x_input,weight_matrix),b_matrix)</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>声明损失函数</li></ol><ul><li>损失函数说明预测值与实际值之间的差距:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss=tf.reduce_mean(tf.square(y_actual-y_pred))</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>初始化模型和训练模型</li></ol><ul><li>TensorFlow创建计算图实例，通过占位符赋值，维护变量的状态信息</li><li><p>初始化计算图的一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session(graph=graph) <span class="keyword">as</span> session:</span><br><span class="line">...</span><br><span class="line">session.run(...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>初始化计算图的另一种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session=tf.Session(graph=graph)</span><br><span class="line">session.run(...)</span><br></pre></td></tr></table></figure></li></ul><ol start="9"><li>评估机器学习模型</li><li>调优超参数</li><li>发布/预测结果</li></ol><h1 id="声明张量"><a href="#声明张量" class="headerlink" title="声明张量"></a>声明张量</h1><p>TensorFlow主要的数据结构就是张量，它用张量来操作计算图。可以把变量或者占位符声明为张量。</p><ol><li>创建张量</li></ol><ul><li><p>固定张量</p><ul><li>创建指定维度的零张量：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zero_tsr=tf.zeros([row_dim,col_dim])</span><br></pre></td></tr></table></figure></li></ul><ul><li>创建指定维度的单位张量：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ones_tsr=tf.ones([row_dim,col_dim])</span><br></pre></td></tr></table></figure></li></ul><ul><li>创建指定维度的常数填充的张量：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filled_tsr=tf.fill([row_dim,col_dim],<span class="number">42</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li>用已知常数张量创建一个张量:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constant_tsr=tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure></li></ul><ul><li>tf.constant()函数也可以广播一个值为数组，然后模拟tf.fill()函数的功能：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.constant(<span class="number">42</span>,[row_dim,col_dim])</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>相似形状的张量<br>  新建一个与给定的tensor类型大小一致的tensor，其所有元素为0或1：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zeros_similar=tf.zeros_like(constant_tsr)</span><br><span class="line">ones_similar=tf.ones_like(contant_tsr)</span><br></pre></td></tr></table></figure></li></ul><ul><li>序列张量<br>  TensorFlow可以创建指定间隔的张量，以下函数的输出与range()函数和numpy中的linspace()函数的输出相似：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linear_tsr=tf.linspace(start=<span class="number">0</span>,stop=<span class="number">1</span>,start=<span class="number">3</span>)          <span class="comment">#返回张量：[0.0,0.5,1.0]序列</span></span><br><span class="line">integer_seq_tsr=tf.range(start=<span class="number">6</span>,limit=<span class="number">15</span>,delta=<span class="number">3</span>)      <span class="comment">#返回张量：[6,9,12]序列</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>随机张量</p><ul><li><p>tf.randon_uniform()生成均匀分布的随机数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">randunif_tsr=tf.random_uniform([row_dim,col_dim],minval=<span class="number">0</span>,maxval=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>tf.randon_normal()生成正太分布的随机数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">random_tsr=tf.random_normal([row_dim,col_dim],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure></li><li><p>tf.truncated_normal()生成带有指定边界的正太分布的随机数，其正态分布的随机数位于指定均值（期望）到两个标准差之间的区间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runcnorm_tsr=tf.truncated_normal([row_dim,col_dim],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>)</span><br></pre></td></tr></table></figure></li><li><p>tf.random_shuffle()和tf.random_crop()可以实现张量/数组的随机化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shuffled_output=tf.random_shuffle(input_tenspr)</span><br><span class="line">cropped_output=tf.random_crop(input_tensor,crop_size)</span><br></pre></td></tr></table></figure></li><li><p>tf.random_crop()可以实现对张量指定大小的随机剪裁，为了固定剪裁结果的一个维度，需要在相应的维度上赋其最大值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cropped_image=tf.random_crop(my_image,[height/<span class="number">2</span>,width/<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li>把张量封装为变量:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt_var=tf.Variable(tf.zeros([row_dim,col_dim]))</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用占位符和变量"><a href="#使用占位符和变量" class="headerlink" title="使用占位符和变量"></a>使用占位符和变量</h1><p>变量是TensorFlow机器学习算法的参数，TensorFlow维护（调整）这些变量的状态来优化机器学习算法。占位符是TensorFlow对象，用于表示输入输出数据的格式，允许传入指定类型和形状的数据，并依赖计算图的计算结果。</p><ol><li><p>使用tf.Variable()函数创建变量，输入一个张量，返回一个变量。声明变量之后需要初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_var=tf.Variable(tf.zeros([<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">sess=tf.Session()</span><br><span class="line">initialize_op=tf.global_variable_initializer()</span><br><span class="line">sess.run(initialize_op)</span><br></pre></td></tr></table></figure></li><li><p>占位符仅仅声明数据位置，用于传入数据到计算图。占位符通过会话的feed_dict参数获取数据。在计算图中使用占位符时，必须在其上执行至少一个操作。在TensorFlow中，初始化计算图，声明一个占位符x，定义y为x的identity操作。identity操作返回占位符传入的数据本身。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sess=tf.Session()</span><br><span class="line">x=tf.placeholder(tf.float32,shape=[<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">y=tf.identity(x)</span><br><span class="line">x_vals=np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sess.run(y,feed_dict=&#123;x:x_vals&#125;)</span><br><span class="line"><span class="comment"># Note that sess.run(x,feed_dict=&#123;x:x_vals&#125;) will result in a self-referencing error.</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="操作矩阵"><a href="#操作矩阵" class="headerlink" title="操作矩阵"></a>操作矩阵</h1><ul><li>创建一个图会话：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess=tf.Session()</span><br></pre></td></tr></table></figure></li></ul><ul><li>创建矩阵：<ul><li>使用numpy创建二维矩阵</li><li>使用创建张量的函数（zeros(),ones(),truncated_normal()等），并为其指定一个二维形状 </li><li>使用diag()函数从一个一维矩阵来创建对角矩阵<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">identity_matrix=tf.diag([<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>])</span><br><span class="line">A=tf.truncated_normal([<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">B=tf.fill([<span class="number">2</span>,<span class="number">3</span>],<span class="number">5.0</span>)</span><br><span class="line">C=tf.random_uniform([<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">D=tf.convert_to_tensor(np.array([[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>],[<span class="number">-3.</span>,<span class="number">-7.</span>,<span class="number">-1.</span>],[<span class="number">0.</span>,<span class="number">5.</span>,<span class="number">-2.</span>,]]))</span><br><span class="line">print(sess.run(identity_matrix))</span><br><span class="line">[[<span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>]]</span><br><span class="line">print(sess.run(A))</span><br><span class="line">[[ <span class="number">0.96751703</span>   <span class="number">0.11397751</span>  <span class="number">-0.3438891</span>]</span><br><span class="line"> [<span class="number">-0.10132604</span>  <span class="number">-0.8432678</span>   <span class="number">0.29810596</span>]]</span><br><span class="line">print(sess.run(B))</span><br><span class="line">[[<span class="number">5.</span>  <span class="number">5.</span>  <span class="number">5.</span> ]</span><br><span class="line"> [<span class="number">5.</span>  <span class="number">5.</span>  <span class="number">5.</span>]]</span><br><span class="line">print(sess.run(C))</span><br><span class="line">[[<span class="number">0.33184157</span>  <span class="number">0.08907614</span>]</span><br><span class="line"> [<span class="number">0.53189191</span>  <span class="number">0.67605299</span>]</span><br><span class="line"> [<span class="number">0.95889051</span>  <span class="number">0.67061249</span>]]</span><br><span class="line">print(sess.run(D))</span><br><span class="line">[[ <span class="number">1.</span>   <span class="number">2.</span>  <span class="number">3.</span>]</span><br><span class="line"> [<span class="number">-3.</span>  <span class="number">-7.</span> <span class="number">-1.</span>]</span><br><span class="line"> [ <span class="number">0.</span>   <span class="number">5.</span> <span class="number">-2.</span>]]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>矩阵的加减法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(A+B))</span><br><span class="line">[[<span class="number">4.61596632</span>  <span class="number">5.39771316</span>   <span class="number">4.4325695</span>]</span><br><span class="line"> [<span class="number">3.26702736</span>  <span class="number">5.14477345</span>  <span class="number">4.98265553</span>]]</span><br><span class="line">print(sess.run(B-B))</span><br><span class="line">[[<span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure></li></ul><ul><li>矩阵的乘法：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.matmul(B,identity_matrix)))</span><br><span class="line">[[<span class="number">5.</span>  <span class="number">5.</span>  <span class="number">5.</span>]</span><br><span class="line"> [<span class="number">5.</span>  <span class="number">5.</span>  <span class="number">5.</span>]]</span><br></pre></td></tr></table></figure></li></ul><ul><li>矩阵转置：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.transpose(C)))</span><br><span class="line">[[<span class="number">0.67124544</span>  <span class="number">0.26766731</span>  <span class="number">0.99068872</span>]</span><br><span class="line"> [<span class="number">0.25006068</span>  <span class="number">0.86560275</span>  <span class="number">0.58411312</span>]]</span><br></pre></td></tr></table></figure></li></ul><ul><li>矩阵行列式的使用：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.matrix_determinant(D)))</span><br><span class="line"><span class="number">-38.0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>逆矩阵：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.matrix_inverse(D)))</span><br><span class="line">[[<span class="number">-0.5</span>        <span class="number">-0.5</span>        <span class="number">-0.5</span>      ]</span><br><span class="line"> [<span class="number">0.15789474</span>  <span class="number">0.05263158</span>  <span class="number">0.21052632</span>]</span><br><span class="line"> [<span class="number">0.39473684</span>  <span class="number">0.13157895</span>  <span class="number">0.02631579</span>]]</span><br></pre></td></tr></table></figure></li></ul><ul><li>矩阵的分解：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.cholesky(identity_matrix)))</span><br><span class="line">[[<span class="number">1.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]]</span><br></pre></td></tr></table></figure></li></ul><ul><li>矩阵的特征值和特征向量：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.self_adjoint_eig(D)))     <span class="comment">#第一行为特征值，剩余的向量是对应的特征向量</span></span><br><span class="line">[[<span class="number">-10.65907521</span> <span class="number">-0.22750691</span>  <span class="number">2.88658212</span>]</span><br><span class="line"> [  <span class="number">0.21749542</span>  <span class="number">0.63250104</span> <span class="number">-0.74339638</span>]</span><br><span class="line"> [  <span class="number">0.84526515</span>  <span class="number">0.2587998</span>   <span class="number">0.46749277</span>]</span><br><span class="line"> [  <span class="number">-0.4880805</span>  <span class="number">0.73004459</span>  <span class="number">0.47834331</span>]]</span><br></pre></td></tr></table></figure></li></ul><h1 id="张量的基本操作"><a href="#张量的基本操作" class="headerlink" title="张量的基本操作"></a>张量的基本操作</h1><p>TensorFlow张量的基本操作有：add()、sub()、mul()、div()、mod()</p><ul><li>值得注意的是，div()函数返回值的数据类型与输入类型一致。所以，在Python2中，整数除法的实际返回是商的向下取整；而在Python3中，TensorFlow提供truediv()函数，其会在除法操作前强制转换整数为浮点数，所以最终的除法结果是浮点数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.div(<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="number">0</span></span><br><span class="line">print(sess.run(tf.truediv(<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line"><span class="number">0.75</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>如果要对浮点数进行整数除法，可以使用floordiv()函数。此函数也返回浮点数结果，但是其会向下舍去小数位到最近的整数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.floordiv(<span class="number">3.0</span>,<span class="number">4.0</span>)))</span><br><span class="line"><span class="number">0.0</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>cross()函数用来计算两个张量间的点积。点积只为三维向量而定义，所以cross()函数的输入是两个三维向量：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.cross([<span class="number">1.</span>,<span class="number">0.</span>,<span class="number">0.</span>],[<span class="number">0.</span>,<span class="number">1.</span>,<span class="number">0.</span>])))</span><br><span class="line">[<span class="number">0.</span> <span class="number">0.</span> <span class="number">1.0</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li>其他数学函数：<br>abs()<br>ceil()<br>cos()<br>exp()<br>floor()<br>inv()：返回输入参数张量的倒数<br>log()<br>maximum()<br>minimum()<br>neg()：返回输入参数张量的负值<br>pow()：返回输入参数第一个张量的第二个张量的次幂<br>round()：返回输入参数张量的四舍五入结果<br>rsqrt()：返回输入参数张量的平方根的倒数<br>sign()：根据输入参数张量的符号，返回-1、0或1<br>sin()<br>sqrt()：返回输入参数张量的平方根<br>square()<br>digamma()：普西（Psi）函数，lgamma()函数的导数<br>erf()：返回张量的高斯误差函数<br>erfc()：返回张量的互补误差函数<br>igamma()：返回下不完全伽马函数<br>igammac()：返回上不完全伽马函数<br>lbeta()：返回贝塔函数绝对值的自然对数<br>lgamma()：返回伽马函数绝对值的自然对数<br>squared_difference()：返回两个张量间差值的平方</li></ul><h1 id="实现激励函数"><a href="#实现激励函数" class="headerlink" title="实现激励函数"></a>实现激励函数</h1><p>TensorFlow的激励函数位于神经网络（neural network，nn）库。</p><ol><li><p>整流线性单元（Rectifier Linear Unit，ReLU）<br>神经网络最常用的非线性函数。其函数为max(0,x)，连续但不平滑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.relu([<span class="number">-3.</span>,<span class="number">3.</span>,<span class="number">10.</span>])))</span><br><span class="line">[<span class="number">0.</span>  <span class="number">3.</span>  <span class="number">10.</span>]</span><br></pre></td></tr></table></figure></li><li><p>ReLU6<br>有时为了抵消ReLU激励函数的线性增长部分，会在min()函数中嵌入max(0,x)，其在TensorFlow中的实现称为ReLU6，表示为min(max(0,x),6)。这是hard-sigmoid函数的变种，计算运行速度快，解决了梯度消失（无限趋近于0）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.relu6([<span class="number">-3.</span>,<span class="number">3.</span>,<span class="number">10.</span>])))</span><br><span class="line">[<span class="number">0.</span>  <span class="number">3.</span>  <span class="number">6.</span>]</span><br></pre></td></tr></table></figure></li><li><p>sigmoid函数<br>最常用的连续，平滑的激励函数。它也被称作逻辑函数（Logistic函数），表示为1/(1+exp(-x))。sigmoid函数由于在机器学习训练过程中反向传播项趋近于0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.sigmoid([<span class="number">-1.</span>,<span class="number">0.</span>,<span class="number">1.</span>])))</span><br><span class="line">[<span class="number">0.26894143</span>  <span class="number">0.5</span>  <span class="number">0.7310586</span>]</span><br></pre></td></tr></table></figure></li><li><p>双曲正切函数（hyper tangent,tanh）<br>双曲正弦与双曲余弦的比值，另一种写法是(exp(x)-exp(-x))/(exp(x)+exp(-x))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.tanh([<span class="number">-1.</span>,<span class="number">0.</span>,<span class="number">1.</span>])))</span><br><span class="line">[<span class="number">-0.76159418</span>  <span class="number">0.</span>  <span class="number">0.76159418</span>]</span><br></pre></td></tr></table></figure></li><li><p>softsign函数<br>符号函数的连续估计，表达式：x/(abs(x)+1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.softsign([<span class="number">-1.</span>,<span class="number">0.</span>,<span class="number">-1.</span>])))</span><br><span class="line">[<span class="number">-0.5</span> <span class="number">0.</span> <span class="number">0.5</span>]</span><br></pre></td></tr></table></figure></li><li><p>softplus激励函数<br>ReLU激励函数的平滑版，表达式为log(exp(x)+1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.softplus([<span class="number">-1.</span>,<span class="number">0.</span>,<span class="number">-1.</span>])))</span><br><span class="line">[<span class="number">0.31326166</span> <span class="number">0.69314718</span> <span class="number">1.31326163</span>]</span><br></pre></td></tr></table></figure></li><li><p>ELU激励函数（Exponential Linear Unit,ELU）<br>与softplus激励函数相似，区别在于：当输入无限小时，ELU激励函数趋近于-1，而softplus激励函数趋近于0。表达式为(exp(x)+1) if x&lt;0 else x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(sess.run(tf.nn.elu([<span class="number">-1.</span>,<span class="number">0.</span>,<span class="number">-1.</span>])))</span><br><span class="line">[<span class="number">-0.63212055</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure></li></ol><h1 id="读取数据源"><a href="#读取数据源" class="headerlink" title="读取数据源"></a>读取数据源</h1><ol><li><p>鸢尾花卉数据集（Iris data）<br>此样本数据是机器学习和统计分析最经典的数据集，包含鸢尾花、变色鸢尾和维吉尼亚鸢尾各自的花萼和花瓣的长度和宽度。总共有150个数据集，每类有50个样本。用Python加载样本数据集时，可以使用Scikit Learn的数据集函数，使用方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">print(len(iris.data))</span><br><span class="line"><span class="number">150</span></span><br><span class="line">print(len(iris.target))</span><br><span class="line"><span class="number">150</span></span><br><span class="line">print(iris.data[<span class="number">0</span>])         <span class="comment">#Sepal length, Sepal width, Petal length, Petal width</span></span><br><span class="line">[<span class="number">5.1</span> <span class="number">3.5</span> <span class="number">1.4</span> <span class="number">0.2</span>]</span><br><span class="line">print(set(iris.target))     <span class="comment"># Ⅰ. setosa, Ⅱ. virginica, Ⅲ. versicolor</span></span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>出生体重数据（Birth weight data）<br>此样本数据集是婴儿出生体重以及母亲和家庭历史人口统计学、医学指标，有189个样本集，包含11个特征变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">birthdata_url = <span class="string">'https://www.umass.edu/statdata/statdata/data/lowbwt.dat'</span></span><br><span class="line">birth_file = requests.get(birthdata_url)</span><br><span class="line">birth_data = birth_file.text.split(<span class="string">'\r\n'</span>)[<span class="number">5</span>:]</span><br><span class="line">birth_header = [x <span class="keyword">for</span> x <span class="keyword">in</span> birth_data[<span class="number">0</span>].split(<span class="string">' '</span>) <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>]</span><br><span class="line">birth_data = [[float(x) <span class="keyword">for</span> x <span class="keyword">in</span> y.split(<span class="string">' '</span>) <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>] <span class="keyword">for</span> y <span class="keyword">in</span> birth_data[<span class="number">1</span>:] <span class="keyword">if</span> len(y)&gt;=<span class="number">1</span>]</span><br><span class="line">print(len(birth_data))            <span class="comment">#189</span></span><br><span class="line">print(len(birth_data[<span class="number">0</span>]))         <span class="comment">#11</span></span><br></pre></td></tr></table></figure></li><li><p>波士顿房价数据（Boston Housing data）<br>此样本数据集保存在卡内基梅隆大学机器学习仓库，总共有506个房价样本，包含14个特征变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">housing_url = <span class="string">'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'</span></span><br><span class="line">housing_header = [<span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'CHAS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>, <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>, <span class="string">'MEDV'</span>]</span><br><span class="line">housing_file = requests.get(housing_url)</span><br><span class="line">housing_data = [[float(x) <span class="keyword">for</span> x <span class="keyword">in</span> y.split(<span class="string">' '</span>) <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>] <span class="keyword">for</span> y <span class="keyword">in</span> housing_file.text.split(<span class="string">'\n'</span>) <span class="keyword">if</span> len(y)&gt;=<span class="number">1</span>]</span><br><span class="line">print(len(housing_data))         <span class="comment">#506</span></span><br><span class="line">print(len(housing_data[<span class="number">0</span>]))      <span class="comment">#14</span></span><br></pre></td></tr></table></figure></li><li><p>MNIST手写体字库<br>MNIST手写体字库是NIST手写体字库的子样本数据集，网址：<a href="https://yann.lecun.com/exdb/mnist" target="_blank" rel="noopener">https://yann.lecun.com/exdb/mnist</a> 包含70000张0到9的图像，其中60000张标注为训练样本数据集，10000张为测试样本数据集。TensorFlow提供内建函数访问。MNIST常用来进行图像识别训练。为了预防过拟合，需要提供验证数据集。TensorFlow从训练样本数据集中留出5000张图片作为验证样本数据集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line">print(len(mnist.train.images))          <span class="comment">#55000</span></span><br><span class="line">print(len(mnist.test.images))           <span class="comment">#10000</span></span><br><span class="line">print(len(mnist.validation.images))     <span class="comment">#5000</span></span><br><span class="line">print(mnist.train.labels[<span class="number">1</span>,:])          <span class="comment">#[0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]</span></span><br></pre></td></tr></table></figure></li><li><p>垃圾短信文本数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get/read zip file</span></span><br><span class="line">zip_url = <span class="string">'http://archive.ics.uci.edu/ml/machine-learning-databases/00228/smsspamcollection.zip'</span></span><br><span class="line">r = requests.get(zip_url)</span><br><span class="line">z = ZipFile(io.BytesIO(r.content))</span><br><span class="line">file = z.read(<span class="string">'SMSSpamCollection'</span>)</span><br><span class="line"><span class="comment"># Format Data</span></span><br><span class="line">text_data = file.decode()</span><br><span class="line">text_data = text_data.encode(<span class="string">'ascii'</span>,errors=<span class="string">'ignore'</span>)</span><br><span class="line">text_data = text_data.decode().split(<span class="string">'\n'</span>)</span><br><span class="line">text_data = [x.split(<span class="string">'\t'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> text_data <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>]</span><br><span class="line">[text_data_target, text_data_train] = [list(x) <span class="keyword">for</span> x <span class="keyword">in</span> zip(*text_data)]</span><br><span class="line">print(len(text_data_train))           <span class="comment">#5574</span></span><br><span class="line">print(set(text_data_target))          <span class="comment">#&#123;'ham','spam'&#125;</span></span><br><span class="line">print(text_data_train[<span class="number">1</span>])             <span class="comment">#OK lar...Joking wif u oni</span></span><br></pre></td></tr></table></figure></li><li><p>影评样本数据集<br>此样本数据集是观影者的影评，分为好评和差评。位于康奈尔大学的仓库：<a href="http://www.cs.cornell.edu/people/pabo/movie-review-data" target="_blank" rel="noopener">http://www.cs.cornell.edu/people/pabo/movie-review-data</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line">movie_data_url = <span class="string">'http://www.cs.cornell.edu/people/pabo/movie-review-data/rt-polaritydata.tar.gz'</span></span><br><span class="line">r = requests.get(movie_data_url)</span><br><span class="line"><span class="comment"># Stream data into temp object</span></span><br><span class="line">stream_data = io.BytesIO(r.content)</span><br><span class="line">tmp = io.BytesIO()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    s = stream_data.read(<span class="number">16384</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:  </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tmp.write(s)</span><br><span class="line">stream_data.close()</span><br><span class="line">tmp.seek(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># Extract tar file</span></span><br><span class="line">tar_file = tarfile.open(fileobj=tmp, mode=<span class="string">"r:gz"</span>)</span><br><span class="line">pos = tar_file.extractfile(<span class="string">'rt-polaritydata/rt-polarity.pos'</span>)</span><br><span class="line">neg = tar_file.extractfile(<span class="string">'rt-polaritydata/rt-polarity.neg'</span>)</span><br><span class="line"><span class="comment"># Save pos/neg reviews</span></span><br><span class="line">pos_data = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> pos:</span><br><span class="line">    pos_data.append(line.decode(<span class="string">'ISO-8859-1'</span>).encode(<span class="string">'ascii'</span>,errors=<span class="string">'ignore'</span>).decode())</span><br><span class="line">neg_data = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> neg:</span><br><span class="line">    neg_data.append(line.decode(<span class="string">'ISO-8859-1'</span>).encode(<span class="string">'ascii'</span>,errors=<span class="string">'ignore'</span>).decode())</span><br><span class="line">tar_file.close()</span><br><span class="line"></span><br><span class="line">print(len(pos_data))              <span class="comment">#5531</span></span><br><span class="line">print(len(neg_data))              <span class="comment">#5331</span></span><br><span class="line">print(neg_data[<span class="number">0</span>])                <span class="comment">#simplistic,silly and tedious</span></span><br></pre></td></tr></table></figure></li><li><p>莎士比亚著作文本数据集（Shakespeare text data）<br>此样本数据集是古登堡数字电子书计划提供的免费电子书籍，他们编译了莎士比亚所有著作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">shakespeare_url = <span class="string">'http://www.gutenberg.org/cache/epub/100/pg100.txt'</span></span><br><span class="line"><span class="comment"># Get Shakespeare text</span></span><br><span class="line">response = requests.get(shakespeare_url)</span><br><span class="line">shakespeare_file = response.content</span><br><span class="line"><span class="comment"># Decode binary into string</span></span><br><span class="line">shakespeare_text = shakespeare_file.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># Drop first few descriptive paragraphs.</span></span><br><span class="line">shakespeare_text = shakespeare_text[<span class="number">7675</span>:]</span><br><span class="line">print(len(shakespeare_text))            <span class="comment">#Number of characters：5582212</span></span><br></pre></td></tr></table></figure></li><li><p>英德句子翻译样本集<br>此数据集由在线翻译数据库Tatoeba发布，ManyThings.org整理并提供下载。这里提供英德语句互译的文本文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipFile</span><br><span class="line">sentence_url = <span class="string">'http://www.manythings.org/anki/deu-eng.zip'</span></span><br><span class="line">r = requests.get(sentence_url)</span><br><span class="line">z = ZipFile(io.BytesIO(r.content))</span><br><span class="line">file = z.read(<span class="string">'deu.txt'</span>)</span><br><span class="line"><span class="comment"># Format Data</span></span><br><span class="line">eng_ger_data = file.decode()</span><br><span class="line">eng_ger_data = eng_ger_data.encode(<span class="string">'ascii'</span>,errors=<span class="string">'ignore'</span>)</span><br><span class="line">eng_ger_data = eng_ger_data.decode().split(<span class="string">'\n'</span>)</span><br><span class="line">eng_ger_data = [x.split(<span class="string">'\t'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> eng_ger_data <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>]</span><br><span class="line">[english_sentence, german_sentence] = [list(x) <span class="keyword">for</span> x <span class="keyword">in</span> zip(*eng_ger_data)]</span><br><span class="line">print(len(english_sentence))         <span class="comment">#137673</span></span><br><span class="line">print(len(german_sentence))          <span class="comment">#137673</span></span><br><span class="line">print(eng_ger_data[<span class="number">10</span>])              <span class="comment">#['I won!,' 'Ich habe gewonnen！']</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TensorFlow算法的一般流程&quot;&gt;&lt;a href=&quot;#TensorFlow算法的一般流程&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow算法的一般流程&quot;&gt;&lt;/a&gt;TensorFlow算法的一般流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;导入/生
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>TFMLC学习笔记（0）序言</title>
    <link href="http://yoursite.com/2018/04/20/TFMLC-0/"/>
    <id>http://yoursite.com/2018/04/20/TFMLC-0/</id>
    <published>2018-04-19T17:56:41.000Z</published>
    <updated>2018-04-19T18:39:56.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书籍信息"><a href="#书籍信息" class="headerlink" title="书籍信息"></a>书籍信息</h1><ul><li>书名：TensorFlow机器学习实战指南</li></ul><ul><li>作者：[美]尼克·麦克卢尔</li></ul><ul><li>译者：曾益强</li></ul><ul><li>出版社：机械工业出版社</li></ul><h1 id="Book-Information"><a href="#Book-Information" class="headerlink" title="Book Information"></a>Book Information</h1><ul><li>Name: TensorFlow Machine Learning Cookbook</li></ul><ul><li>Author: Nike McClure</li></ul><ul><li>Publisher: Packt Publishing</li></ul><h1 id="环境搭建-软件清单"><a href="#环境搭建-软件清单" class="headerlink" title="环境搭建+软件清单"></a>环境搭建+软件清单</h1><ul><li>Python3</li></ul><ul><li>TensorFlow</li></ul><ul><li>numpy</li></ul><ul><li>scipy</li></ul><ul><li>sklearn</li></ul><ul><li>jupyter</li></ul><ul><li>matplotlib</li></ul><ul><li>requests</li></ul><ul><li>Pillow</li></ul><h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><ul><li><a href="https://github.com/nfmcclure/tensorflow_cookbook" target="_blank" rel="noopener">GitHub</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;书籍信息&quot;&gt;&lt;a href=&quot;#书籍信息&quot; class=&quot;headerlink&quot; title=&quot;书籍信息&quot;&gt;&lt;/a&gt;书籍信息&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;书名：TensorFlow机器学习实战指南&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;作者：[美]尼克·麦克卢尔&lt;
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/19/hello-world/"/>
    <id>http://yoursite.com/2018/04/19/hello-world/</id>
    <published>2018-04-18T17:38:21.578Z</published>
    <updated>2018-04-18T17:38:21.579Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
